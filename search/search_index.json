{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Quote Engine API Documentation The Quote Engine API is a fast and reliable API that generates random motivational quotes. This API is built using FastAPI, a high-performance web framework for building APIs with Python. With the Quote Engine API, you can easily integrate motivational quotes into your application or website, providing your users with daily inspiration and motivation. Whether you're building a personal development app, a fitness tracker, or a productivity tool, the Quote Engine API can help you enhance your user experience. This documentation provides an overview of the Quote Engine API, including how to access the API, the available endpoints, and how to use the API in your application. Let's get started! Getting Started To start using the Quote Engine API, follow these steps: 1. Clone the repository to your local machine using the following command: $ git clone https://github.com/njeru-codes/The-Quote-Engine 2.Create a .env file in the root directory of the project and add the following variables: mongo_uri=\"\" secret_key=\"\" The mongo_uri variable should be set to the URI of your MongoDB database. The secret_key variable is a random string used to create JWT tokens. You can generate a random string using the following command: $ openssl rand -hex 32 3.Install the required dependencies using the following command: $ pip install -r requirements.txt 4.Start the server using the following command: $ uvicorn app.main:app 5.To view the API documentation, navigate to http://localhost:8000/docs in your web browser. 6.To view the documentation for the API built with OpenAPI, navigate to the api docs directory in the root of the project using the terminal, and run the following command: $ mkdocs serve This will start a local development server for the API documentation. You can then view the documentation by navigating to http://localhost:8000 in your web browser. tech stack The Quote Engine API is built with the following technologies: Python : The core programming language used to build the API. FastAPI : A modern, fast (high-performance) web framework for building APIs with Python. * MongoDB : A NoSQL document-oriented database used to store the quotes data. PyMongo : A Python library for interacting with MongoDB databases. PyJWT : A Python library for encoding and decoding JSON Web Tokens (JWTs). Bcrypt : A password hashing library used to hash and verify user passwords. Requests : A Python library used to make HTTP requests to external APIs. MkDocs : A static site generator used to generate the API documentation. Material for MkDocs : A Material Design theme for MkDocs used to style the API documentation. The combination of these technologies provides a powerful and scalable platform for generating random motivational quotes, with a robust and user-friendly API and documentation.","title":"Home"},{"location":"#quote-engine-api-documentation","text":"The Quote Engine API is a fast and reliable API that generates random motivational quotes. This API is built using FastAPI, a high-performance web framework for building APIs with Python. With the Quote Engine API, you can easily integrate motivational quotes into your application or website, providing your users with daily inspiration and motivation. Whether you're building a personal development app, a fitness tracker, or a productivity tool, the Quote Engine API can help you enhance your user experience. This documentation provides an overview of the Quote Engine API, including how to access the API, the available endpoints, and how to use the API in your application. Let's get started!","title":"Quote Engine API Documentation"},{"location":"#getting-started","text":"To start using the Quote Engine API, follow these steps: 1. Clone the repository to your local machine using the following command: $ git clone https://github.com/njeru-codes/The-Quote-Engine 2.Create a .env file in the root directory of the project and add the following variables: mongo_uri=\"\" secret_key=\"\" The mongo_uri variable should be set to the URI of your MongoDB database. The secret_key variable is a random string used to create JWT tokens. You can generate a random string using the following command: $ openssl rand -hex 32 3.Install the required dependencies using the following command: $ pip install -r requirements.txt 4.Start the server using the following command: $ uvicorn app.main:app 5.To view the API documentation, navigate to http://localhost:8000/docs in your web browser. 6.To view the documentation for the API built with OpenAPI, navigate to the api docs directory in the root of the project using the terminal, and run the following command: $ mkdocs serve This will start a local development server for the API documentation. You can then view the documentation by navigating to http://localhost:8000 in your web browser.","title":"Getting Started"},{"location":"#tech-stack","text":"The Quote Engine API is built with the following technologies: Python : The core programming language used to build the API. FastAPI : A modern, fast (high-performance) web framework for building APIs with Python. * MongoDB : A NoSQL document-oriented database used to store the quotes data. PyMongo : A Python library for interacting with MongoDB databases. PyJWT : A Python library for encoding and decoding JSON Web Tokens (JWTs). Bcrypt : A password hashing library used to hash and verify user passwords. Requests : A Python library used to make HTTP requests to external APIs. MkDocs : A static site generator used to generate the API documentation. Material for MkDocs : A Material Design theme for MkDocs used to style the API documentation. The combination of these technologies provides a powerful and scalable platform for generating random motivational quotes, with a robust and user-friendly API and documentation.","title":"tech stack"},{"location":"FAQs/","text":"FAQs Q: What is Quote Engine? A: Quote Engine is an API that provides random motivational quotes. Q: Do I need an API key to use Quote Engine? A: Yes, you need to include your API key in the headers of your API requests to authenticate with the API. Q: How do I get an API key? A: To get an API key, you need to register for an account on the Quote Engine website and generate an API key from your account dashboard. Q: What is the rate limit for API requests? A: The rate limit for API requests is currently set at 100 requests per minute. If you exceed this limit, you will receive a 429 error response. Q: What format are the quotes returned in? A: The quotes are returned in JSON format, with the following fields: quote (string) and author (string). Q: Can I request multiple quotes at once? A: Yes, you can specify the number of quotes you want to receive by including a limit parameter in your API request. The default value for limit is 1 if not specified. Q: Is the Quote Engine API free to use? A: Yes, the Quote Engine API is free to use for non-commercial purposes. If you plan to use the API for commercial purposes, please contact us to discuss licensing options.","title":"FAQs"},{"location":"FAQs/#faqs","text":"Q: What is Quote Engine? A: Quote Engine is an API that provides random motivational quotes. Q: Do I need an API key to use Quote Engine? A: Yes, you need to include your API key in the headers of your API requests to authenticate with the API. Q: How do I get an API key? A: To get an API key, you need to register for an account on the Quote Engine website and generate an API key from your account dashboard. Q: What is the rate limit for API requests? A: The rate limit for API requests is currently set at 100 requests per minute. If you exceed this limit, you will receive a 429 error response. Q: What format are the quotes returned in? A: The quotes are returned in JSON format, with the following fields: quote (string) and author (string). Q: Can I request multiple quotes at once? A: Yes, you can specify the number of quotes you want to receive by including a limit parameter in your API request. The default value for limit is 1 if not specified. Q: Is the Quote Engine API free to use? A: Yes, the Quote Engine API is free to use for non-commercial purposes. If you plan to use the API for commercial purposes, please contact us to discuss licensing options.","title":"FAQs"},{"location":"examples/","text":"EXAMPLES javascript fetch const apiURL = 'https://your-quote-engine-api.com/quotes'; const limit = 1; // You can change this to return more quotes if you'd like fetch(`${apiURL}/random?limit=${limit}`, { headers: { 'X-API-Key': 'your-api-key-here' } }) .then(response => response.json()) .then(data => { console.log(data); // Log the response to the console // Do something with the quote data const quote = data[0]; // If `limit` is set to 1, this will get the first (and only) quote console.log(quote.quote); // Log the quote text to the console console.log(quote.author); // Log the quote author to the console }) .catch(error => { console.error(error); // Log any errors to the console }); Javascript axios const axios = require('axios'); const API_URL = 'https://example.com/api'; const API_KEY = 'your_api_key'; // Fetch a random quote const getRandomQuote = async (limit = 1) => { try { const response = await axios.get(`${API_URL}/random?limit=${limit}`, { headers: { 'x-api-key': API_KEY } }); return response.data; } catch (error) { console.error(error); } }; // Usage example getRandomQuote().then(data => console.log(data)); python import requests API_URL = 'https://example.com/api' API_KEY = 'your_api_key' # Fetch a random quote def get_random_quote(limit=1): headers = {'x-api-key': API_KEY} params = {'limit': limit} response = requests.get(f'{API_URL}/random', headers=headers, params=params) if response.status_code == 200: return response.json() else: print(f'Error fetching quote: {response.status_code}') return None # Usage example quote = get_random_quote() if quote: print(quote['quote']) print(f'- {quote['author']}') java import java.net.URI; import java.net.http.HttpClient; import java.net.http.HttpRequest; import java.net.http.HttpResponse; import java.util.HashMap; import java.util.Map; public class QuoteAPI { private static final String API_URL = \"https://example.com/api\"; private static final String API_KEY = \"your_api_key\"; // Fetch a random quote public static String[] getRandomQuote(int limit) throws Exception { Map<String, String> headers = new HashMap<>(); headers.put(\"x-api-key\", API_KEY); URI uri = URI.create(API_URL + \"/random?limit=\" + limit); HttpRequest request = HttpRequest.newBuilder() .uri(uri) .headers(headers.entrySet().stream() .flatMap(e -> e.getValue().isEmpty() ? Stream.empty() : Stream.of(e.getKey(), e.getValue())) .toArray(String[]::new)) .build(); HttpResponse<String> response = HttpClient.newHttpClient() .send(request, HttpResponse.BodyHandlers.ofString()); if (response.statusCode() == 200) { String[] quote = new String[2]; quote[0] = response.body().split(\"\\\"\")[3]; quote[1] = response.body().split(\"\\\"\")[7]; return quote; } else { System.out.println(\"Error fetching quote: \" + response.statusCode()); return null; } } // Usage example public static void main(String[] args) throws Exception { String[] quote = getRandomQuote(1); if (quote != null) { System.out.println(quote[0]); System.out.println(\"- \" + quote[1]); } } } dart import 'dart:convert'; import 'package:http/http.dart' as http; Future<Map<String, dynamic>> getRandomQuote({int limit = 1, String apiKey}) async { final url = Uri.parse('https://example.com/api/random?limit=$limit'); final response = await http.get( url, headers: {'x-api-key': apiKey}, ); if (response.statusCode == 200) { final data = jsonDecode(response.body); final quote = data['quote']; final author = data['author']; return {'quote': quote, 'author': author}; } else { throw Exception('Failed to fetch quote'); } } // Usage example void main() async { final apiKey = 'your_api_key'; final quote = await getRandomQuote(apiKey: apiKey); print('${quote['quote']}\\n- ${quote['author']}'); } php function getRandomQuote($apiKey, $limit = 1) { $url = \"https://example.com/api/random?limit=$limit\"; $curl = curl_init($url); curl_setopt($curl, CURLOPT_HTTPHEADER, array('x-api-key: ' . $apiKey)); curl_setopt($curl, CURLOPT_RETURNTRANSFER, true); $response = curl_exec($curl); if(curl_errno($curl)) { throw new Exception('Failed to fetch quote: ' . curl_error($curl)); } $httpCode = curl_getinfo($curl, CURLINFO_HTTP_CODE); curl_close($curl); if($httpCode === 200) { $data = json_decode($response, true); return array('quote' => $data['quote'], 'author' => $data['author']); } else { throw new Exception('Failed to fetch quote'); } } // Usage example $apiKey = 'your_api_key'; $quote = getRandomQuote($apiKey); echo \"{$quote['quote']}\\n- {$quote['author']}\"; ruby require 'httparty' def get_random_quote(api_key, limit = 1) url = \"https://example.com/api/random?limit=#{limit}\" headers = {'x-api-key' => api_key} response = HTTParty.get(url, headers: headers) if response.code == 200 data = JSON.parse(response.body) {'quote' => data['quote'], 'author' => data['author']} else raise \"Failed to fetch quote (status code: #{response.code})\" end end # Usage example api_key = 'your_api_key' quote = get_random_quote(api_key) puts \"#{quote['quote']}\\n- #{quote['author']}\"","title":"examples"},{"location":"examples/#examples","text":"","title":"EXAMPLES"},{"location":"examples/#javascript-fetch","text":"const apiURL = 'https://your-quote-engine-api.com/quotes'; const limit = 1; // You can change this to return more quotes if you'd like fetch(`${apiURL}/random?limit=${limit}`, { headers: { 'X-API-Key': 'your-api-key-here' } }) .then(response => response.json()) .then(data => { console.log(data); // Log the response to the console // Do something with the quote data const quote = data[0]; // If `limit` is set to 1, this will get the first (and only) quote console.log(quote.quote); // Log the quote text to the console console.log(quote.author); // Log the quote author to the console }) .catch(error => { console.error(error); // Log any errors to the console });","title":"javascript fetch"},{"location":"examples/#javascript-axios","text":"const axios = require('axios'); const API_URL = 'https://example.com/api'; const API_KEY = 'your_api_key'; // Fetch a random quote const getRandomQuote = async (limit = 1) => { try { const response = await axios.get(`${API_URL}/random?limit=${limit}`, { headers: { 'x-api-key': API_KEY } }); return response.data; } catch (error) { console.error(error); } }; // Usage example getRandomQuote().then(data => console.log(data));","title":"Javascript axios"},{"location":"examples/#python","text":"import requests API_URL = 'https://example.com/api' API_KEY = 'your_api_key' # Fetch a random quote def get_random_quote(limit=1): headers = {'x-api-key': API_KEY} params = {'limit': limit} response = requests.get(f'{API_URL}/random', headers=headers, params=params) if response.status_code == 200: return response.json() else: print(f'Error fetching quote: {response.status_code}') return None # Usage example quote = get_random_quote() if quote: print(quote['quote']) print(f'- {quote['author']}')","title":"python"},{"location":"examples/#java","text":"import java.net.URI; import java.net.http.HttpClient; import java.net.http.HttpRequest; import java.net.http.HttpResponse; import java.util.HashMap; import java.util.Map; public class QuoteAPI { private static final String API_URL = \"https://example.com/api\"; private static final String API_KEY = \"your_api_key\"; // Fetch a random quote public static String[] getRandomQuote(int limit) throws Exception { Map<String, String> headers = new HashMap<>(); headers.put(\"x-api-key\", API_KEY); URI uri = URI.create(API_URL + \"/random?limit=\" + limit); HttpRequest request = HttpRequest.newBuilder() .uri(uri) .headers(headers.entrySet().stream() .flatMap(e -> e.getValue().isEmpty() ? Stream.empty() : Stream.of(e.getKey(), e.getValue())) .toArray(String[]::new)) .build(); HttpResponse<String> response = HttpClient.newHttpClient() .send(request, HttpResponse.BodyHandlers.ofString()); if (response.statusCode() == 200) { String[] quote = new String[2]; quote[0] = response.body().split(\"\\\"\")[3]; quote[1] = response.body().split(\"\\\"\")[7]; return quote; } else { System.out.println(\"Error fetching quote: \" + response.statusCode()); return null; } } // Usage example public static void main(String[] args) throws Exception { String[] quote = getRandomQuote(1); if (quote != null) { System.out.println(quote[0]); System.out.println(\"- \" + quote[1]); } } }","title":"java"},{"location":"examples/#dart","text":"import 'dart:convert'; import 'package:http/http.dart' as http; Future<Map<String, dynamic>> getRandomQuote({int limit = 1, String apiKey}) async { final url = Uri.parse('https://example.com/api/random?limit=$limit'); final response = await http.get( url, headers: {'x-api-key': apiKey}, ); if (response.statusCode == 200) { final data = jsonDecode(response.body); final quote = data['quote']; final author = data['author']; return {'quote': quote, 'author': author}; } else { throw Exception('Failed to fetch quote'); } } // Usage example void main() async { final apiKey = 'your_api_key'; final quote = await getRandomQuote(apiKey: apiKey); print('${quote['quote']}\\n- ${quote['author']}'); }","title":"dart"},{"location":"examples/#php","text":"function getRandomQuote($apiKey, $limit = 1) { $url = \"https://example.com/api/random?limit=$limit\"; $curl = curl_init($url); curl_setopt($curl, CURLOPT_HTTPHEADER, array('x-api-key: ' . $apiKey)); curl_setopt($curl, CURLOPT_RETURNTRANSFER, true); $response = curl_exec($curl); if(curl_errno($curl)) { throw new Exception('Failed to fetch quote: ' . curl_error($curl)); } $httpCode = curl_getinfo($curl, CURLINFO_HTTP_CODE); curl_close($curl); if($httpCode === 200) { $data = json_decode($response, true); return array('quote' => $data['quote'], 'author' => $data['author']); } else { throw new Exception('Failed to fetch quote'); } } // Usage example $apiKey = 'your_api_key'; $quote = getRandomQuote($apiKey); echo \"{$quote['quote']}\\n- {$quote['author']}\";","title":"php"},{"location":"examples/#ruby","text":"require 'httparty' def get_random_quote(api_key, limit = 1) url = \"https://example.com/api/random?limit=#{limit}\" headers = {'x-api-key' => api_key} response = HTTParty.get(url, headers: headers) if response.code == 200 data = JSON.parse(response.body) {'quote' => data['quote'], 'author' => data['author']} else raise \"Failed to fetch quote (status code: #{response.code})\" end end # Usage example api_key = 'your_api_key' quote = get_random_quote(api_key) puts \"#{quote['quote']}\\n- #{quote['author']}\"","title":"ruby"},{"location":"routes/","text":"Route Documentation POST /login Endpoint used to authenticate users and generate a JWT access token. Request HTTP Method: POST Endpoint: /login Headers: Content-Type: application/x-www-form-urlencoded Request Body: username: \"The user's username or email\". password: \"The user's password\". Response Status Codes: 200 OK: Successful authentication. 400 Bad Request: Invalid credentials. Response Body: access_token: The JWT access token. token_type: \"Bearer\". example $ curl -X POST https://example.com/login \\ -H \"Content-Type: application/x-www-form-urlencoded\" \\ -d \"username=john_doe&password=secret\" sample response { \"access_token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...<JWT Token>\", \"token_type\": \"Bearer\" } POST /user/new Endpoint used to create a new user. Request HTTP Method: POST Endpoint: /user/new Headers: Content-Type: application/json Request Body: email: The user's email address. This should be a valid email address. password: The user's password. This should be a string. first_name: The user's first name. This should be a string. surname: The user's surname. This should be a string. username: The user's username. This should be a string. Response Status Codes: 201 Created: User created successfully. 400 Bad Request: Invalid request body. 403 Forbidden: User with the same email or username already exists. Response Body (if status code is 201 Created): user_id: The unique identifier of the created user. email: The email address of the created user. Response Body (if status code is 400 Bad Request): detail: The error message explaining the validation error(s). Response Body (if status code is 403 Forbidden): detail: The error message explaining that the email or username already exists. Example $ curl -X POST https://example.com/user/new \\ -H \"Content-Type: application/json\" \\ -d '{\"email\": \"john.doe@example.com\", \"password\": \"password\", \"first_name\": \"John\", \"surname\": \"Doe\", \"username\": \"johndoe\"}' { \"user_id\": \"12345\", \"email\": \"john.doe@example.com\" } GET /quotes This endpoint returns a random motivational quote from the database. Request Parameters limit (optional): The maximum number of quotes to return. Defaults to 1 if not set. Headers X-API-Key: The API key used to authenticate the request. Response Returns a JSON object or an array of objects with the following fields: quote: The text of the motivational quote. author: The author of the quote. Example response with limit set to 1: { \"quote\": \"The only way to do great work is to love what you do.\", \"author\": \"Steve Jobs\" } Example response with limit set to 3: [ { \"quote\": \"The only way to do great work is to love what you do.\", \"author\": \"Steve Jobs\" }, { \"quote\": \"Success is not final, failure is not fatal: It is the courage to continue that counts.\", \"author\": \"Winston S. Churchill\" }, { \"quote\": \"Believe you can and you're halfway there.\", \"author\": \"Theodore Roosevelt\" } ]","title":"Routes"},{"location":"routes/#route-documentation","text":"","title":"Route Documentation"},{"location":"routes/#post-login","text":"Endpoint used to authenticate users and generate a JWT access token. Request HTTP Method: POST Endpoint: /login Headers: Content-Type: application/x-www-form-urlencoded Request Body: username: \"The user's username or email\". password: \"The user's password\". Response Status Codes: 200 OK: Successful authentication. 400 Bad Request: Invalid credentials. Response Body: access_token: The JWT access token. token_type: \"Bearer\". example $ curl -X POST https://example.com/login \\ -H \"Content-Type: application/x-www-form-urlencoded\" \\ -d \"username=john_doe&password=secret\" sample response { \"access_token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...<JWT Token>\", \"token_type\": \"Bearer\" }","title":"POST /login"},{"location":"routes/#post-usernew","text":"Endpoint used to create a new user. Request HTTP Method: POST Endpoint: /user/new Headers: Content-Type: application/json Request Body: email: The user's email address. This should be a valid email address. password: The user's password. This should be a string. first_name: The user's first name. This should be a string. surname: The user's surname. This should be a string. username: The user's username. This should be a string. Response Status Codes: 201 Created: User created successfully. 400 Bad Request: Invalid request body. 403 Forbidden: User with the same email or username already exists. Response Body (if status code is 201 Created): user_id: The unique identifier of the created user. email: The email address of the created user. Response Body (if status code is 400 Bad Request): detail: The error message explaining the validation error(s). Response Body (if status code is 403 Forbidden): detail: The error message explaining that the email or username already exists. Example $ curl -X POST https://example.com/user/new \\ -H \"Content-Type: application/json\" \\ -d '{\"email\": \"john.doe@example.com\", \"password\": \"password\", \"first_name\": \"John\", \"surname\": \"Doe\", \"username\": \"johndoe\"}' { \"user_id\": \"12345\", \"email\": \"john.doe@example.com\" }","title":"POST /user/new"},{"location":"routes/#get-quotes","text":"This endpoint returns a random motivational quote from the database. Request Parameters limit (optional): The maximum number of quotes to return. Defaults to 1 if not set. Headers X-API-Key: The API key used to authenticate the request. Response Returns a JSON object or an array of objects with the following fields: quote: The text of the motivational quote. author: The author of the quote. Example response with limit set to 1: { \"quote\": \"The only way to do great work is to love what you do.\", \"author\": \"Steve Jobs\" } Example response with limit set to 3: [ { \"quote\": \"The only way to do great work is to love what you do.\", \"author\": \"Steve Jobs\" }, { \"quote\": \"Success is not final, failure is not fatal: It is the courage to continue that counts.\", \"author\": \"Winston S. Churchill\" }, { \"quote\": \"Believe you can and you're halfway there.\", \"author\": \"Theodore Roosevelt\" } ]","title":"GET /quotes"},{"location":"support/","text":"Support If you have any issues or questions about Quote Engine, please contact our support team at support@quoteengine.com. Troubleshooting Invalid API key If you are receiving an Invalid API key error when making API requests, please ensure that you have included your API key in the headers of your request. You can generate an API key from your account dashboard on the Quote Engine website. Rate limiting If you are receiving a 429 Too Many Requests error when making API requests, it means that you have exceeded the rate limit for your account. Please wait a minute before making additional requests. Error responses If you are receiving an error response from the Quote Engine API, please check the error message and status code to determine the cause of the error. If you are still having issues, please contact our support team for assistance. Feedback We are always looking for ways to improve Quote Engine and make it more useful for our users. If you have any feedback or suggestions, please email us at feedback@quoteengine.com.","title":"Support"},{"location":"support/#support","text":"If you have any issues or questions about Quote Engine, please contact our support team at support@quoteengine.com.","title":"Support"},{"location":"support/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"support/#invalid-api-key","text":"If you are receiving an Invalid API key error when making API requests, please ensure that you have included your API key in the headers of your request. You can generate an API key from your account dashboard on the Quote Engine website.","title":"Invalid API key"},{"location":"support/#rate-limiting","text":"If you are receiving a 429 Too Many Requests error when making API requests, it means that you have exceeded the rate limit for your account. Please wait a minute before making additional requests.","title":"Rate limiting"},{"location":"support/#error-responses","text":"If you are receiving an error response from the Quote Engine API, please check the error message and status code to determine the cause of the error. If you are still having issues, please contact our support team for assistance.","title":"Error responses"},{"location":"support/#feedback","text":"We are always looking for ways to improve Quote Engine and make it more useful for our users. If you have any feedback or suggestions, please email us at feedback@quoteengine.com.","title":"Feedback"}]}